# Lambda Module - Lightweight Version
# Uses Lambda functions for fast deployment

# Data sources
data "terraform_remote_state" "database_dynamodb" {
  backend = "s3"
  # This will be auto-generated by Envie
}

data "terraform_remote_state" "networking_vpc" {
  backend = "s3"
  # This will be auto-generated by Envie
}

variable "runtime" {
  description = "Lambda runtime"
  type        = string
  default     = "python3.9"
}

variable "timeout" {
  description = "Lambda timeout in seconds"
  type        = number
  default     = 30
}

variable "memory" {
  description = "Lambda memory in MB"
  type        = number
  default     = 128
}

# Lambda function
resource "aws_lambda_function" "api_handler" {
  filename         = "api_handler.zip"
  function_name    = "api-handler-${random_id.lambda_id.hex}"
  role            = aws_iam_role.lambda_role.arn
  handler         = "index.handler"
  runtime         = var.runtime
  timeout         = var.timeout
  memory_size     = var.memory

  environment {
    variables = {
      TABLE_NAME = data.terraform_remote_state.database_dynamodb.outputs.table_name
      TABLE_ARN  = data.terraform_remote_state.database_dynamodb.outputs.table_arn
      VPC_ID     = data.terraform_remote_state.networking_vpc.outputs.vpc_id
    }
  }

  tags = {
    Name        = "api-handler"
    Environment = "ephemeral"
    Service     = "api"
    Module      = "lambda"
  }
}

# Random ID for uniqueness
resource "random_id" "lambda_id" {
  byte_length = 4
}

# IAM role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "api-handler-role-${random_id.lambda_id.hex}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# Attach basic execution policy
resource "aws_iam_role_policy_attachment" "lambda_basic" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Create the Lambda deployment package
data "archive_file" "lambda_zip" {
  type        = "zip"
  output_path = "api_handler.zip"
  source {
    content = <<EOF
import json
import os

def handler(event, context):
    table_name = os.environ.get('TABLE_NAME', 'unknown')
    table_arn = os.environ.get('TABLE_ARN', 'unknown')
    vpc_id = os.environ.get('VPC_ID', 'unknown')
    
    return {
        'statusCode': 200,
        'body': json.dumps({
            'message': 'Hello from API Lambda!',
            'table_name': table_name,
            'table_arn': table_arn,
            'vpc_id': vpc_id,
            'event': event
        })
    }
EOF
    filename = "index.py"
  }
}

# Outputs
output "function_name" {
  description = "Name of the Lambda function"
  value       = aws_lambda_function.api_handler.function_name
}

output "function_arn" {
  description = "ARN of the Lambda function"
  value       = aws_lambda_function.api_handler.arn
}

output "function_invoke_arn" {
  description = "Invoke ARN of the Lambda function"
  value       = aws_lambda_function.api_handler.invoke_arn
}
