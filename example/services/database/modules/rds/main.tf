# RDS Module - Lightweight Version
# Uses Lambda function to simulate RDS operations

# Data sources
data "terraform_remote_state" "networking" {
  backend = "s3"
  # This will be auto-generated by Envie
}

data "terraform_remote_state" "security_groups" {
  backend = "s3"
  # This will be auto-generated by Envie
}

variable "instance_class" {
  description = "RDS instance class"
  type        = string
  default     = "db.t3.micro"
}

variable "allocated_storage" {
  description = "Allocated storage in GB"
  type        = number
  default     = 20
}

# Lambda function to simulate RDS operations
resource "aws_lambda_function" "rds_simulator" {
  filename         = "rds_simulator.zip"
  function_name    = "rds-simulator-${random_id.db_id.hex}"
  role            = aws_iam_role.lambda_role.arn
  handler         = "index.handler"
  runtime         = "python3.9"
  timeout         = 30

  environment {
    variables = {
      INSTANCE_CLASS     = var.instance_class
      ALLOCATED_STORAGE  = var.allocated_storage
      VPC_ID            = data.terraform_remote_state.networking.outputs.vpc_id
      SECURITY_GROUP_ID = data.terraform_remote_state.security_groups.outputs.database_security_group_id
    }
  }

  tags = {
    Name        = "rds-simulator"
    Environment = "ephemeral"
    Service     = "database"
    Module      = "rds"
  }
}

# Random ID for uniqueness
resource "random_id" "db_id" {
  byte_length = 4
}

# IAM role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "rds-simulator-role-${random_id.db_id.hex}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# Attach basic execution policy
resource "aws_iam_role_policy_attachment" "lambda_basic" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Create the Lambda deployment package
data "archive_file" "lambda_zip" {
  type        = "zip"
  output_path = "rds_simulator.zip"
  source {
    content = <<EOF
def handler(event, context):
    return {
        'statusCode': 200,
        'body': f'RDS instance {event.get("INSTANCE_CLASS", "db.t3.micro")} simulated'
    }
EOF
    filename = "index.py"
  }
}

# Outputs
output "db_instance_id" {
  description = "ID of the RDS instance"
  value       = "db-${random_id.db_id.hex}"
}

output "db_endpoint" {
  description = "Endpoint of the RDS instance"
  value       = "db-${random_id.db_id.hex}.cluster-xyz.eu-west-1.rds.amazonaws.com"
}

output "db_port" {
  description = "Port of the RDS instance"
  value       = 5432
}

output "lambda_function_name" {
  description = "Name of the Lambda function"
  value       = aws_lambda_function.rds_simulator.function_name
}

output "lambda_function_arn" {
  description = "ARN of the Lambda function"
  value       = aws_lambda_function.rds_simulator.arn
}
