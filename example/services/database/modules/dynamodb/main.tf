# DynamoDB Module - Lightweight Version
# Uses Lambda function to simulate DynamoDB operations

# Data source for VPC
data "terraform_remote_state" "networking" {
  backend = "s3"
  # This will be auto-generated by Envie
}

variable "table_name" {
  description = "Name of the DynamoDB table"
  type        = string
  default     = "example-table"
}

variable "billing_mode" {
  description = "Billing mode for the table"
  type        = string
  default     = "PAY_PER_REQUEST"
}

# Lambda function to simulate DynamoDB operations
resource "aws_lambda_function" "dynamodb_simulator" {
  filename         = "dynamodb_simulator.zip"
  function_name    = "dynamodb-simulator-${var.table_name}"
  role            = aws_iam_role.lambda_role.arn
  handler         = "index.handler"
  runtime         = "python3.9"
  timeout         = 30

  environment {
    variables = {
      TABLE_NAME = var.table_name
      VPC_ID     = data.terraform_remote_state.networking.outputs.vpc_id
    }
  }

  tags = {
    Name        = "dynamodb-simulator"
    Environment = "ephemeral"
    Service     = "database"
    Module      = "dynamodb"
  }
}

# IAM role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "dynamodb-simulator-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# Attach basic execution policy
resource "aws_iam_role_policy_attachment" "lambda_basic" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Create the Lambda deployment package
data "archive_file" "lambda_zip" {
  type        = "zip"
  output_path = "dynamodb_simulator.zip"
  source {
    content = <<EOF
def handler(event, context):
    return {
        'statusCode': 200,
        'body': f'DynamoDB table {event.get("TABLE_NAME", "example-table")} simulated'
    }
EOF
    filename = "index.py"
  }
}

# Outputs
output "table_name" {
  description = "Name of the DynamoDB table"
  value       = var.table_name
}

output "table_arn" {
  description = "ARN of the DynamoDB table"
  value       = "arn:aws:dynamodb:eu-west-1:123456789012:table/${var.table_name}"
}

output "table_stream_arn" {
  description = "Stream ARN of the DynamoDB table"
  value       = "arn:aws:dynamodb:eu-west-1:123456789012:table/${var.table_name}/stream/2023-01-01T00:00:00.000"
}

output "lambda_function_name" {
  description = "Name of the Lambda function"
  value       = aws_lambda_function.dynamodb_simulator.function_name
}

output "lambda_function_arn" {
  description = "ARN of the Lambda function"
  value       = aws_lambda_function.dynamodb_simulator.arn
}
